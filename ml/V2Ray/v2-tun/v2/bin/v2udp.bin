#!/system/bin/sh

#全局变量(默认参数)
#可以通过配置文件设置
TunDev=v2tun
#免udp(0=关闭,1=开启,2=放行)
mudp=1
#放行除tcp,udp外的流量(1放行)
fxqt=1

#=================================
DIR="${0%/*}"
cd $DIR/../
. ./config.ini
if [ -e confs/${file}.ini ]; then
  . confs/${file}.ini
else
  echo "请检查配置文件是否正确!" && exit 1
fi
export PATH=$DIR:$PATH

stopServer() {
  #清除iptables规则
  iptables -t nat -D OUTPUT -j VNO
  iptables -t nat -D PREROUTING -j VNP
  iptables -t mangle -D OUTPUT -j VMO
  iptables -t mangle -D PREROUTING -j VMP
  iptables -F FORWARD
  iptables -t nat -F VNO
  iptables -t nat -X VNO
  iptables -t nat -F VNP
  iptables -t nat -X VNP
  iptables -t mangle -F VMO
  iptables -t mangle -X VMO
  iptables -t mangle -F VMP
  iptables -t mangle -X VMP
  # 关闭程序
  busybox killall tun2socks v2ray clnc 2>&-
  # 清除ip规则
  ip route del local default dev lo table 1234
  ip rule del fwmark 0x1234 lookup 1234
  ip tuntap del mode tun $TunDev
  ip rule del from all fwmark 0x1234 lookup 1234
  # IPV6禁网设置
  if [ "$denyIpv6" == '1' ]; then
    ip6tables -t mangle -P OUTPUT DROP
    ip6tables -t mangle -P FORWARD DROP
  else
    ip6tables -t mangle -P OUTPUT ACCEPT
    ip6tables -t mangle -P FORWARD ACCEPT
  fi
}

v2tunStart(){
  [ ! -e "/dev/net/tun" ] && mkdir -p /dev/net && ln -s /dev/tun /dev/net/tun && echo 1 > /proc/sys/net/ipv4/ip_forward
  ip tuntap add mode tun $TunDev >/dev/null 2>&1
  ip addr add 10.0.0.1/24 dev $TunDev >/dev/null 2>&1
  ip link set $TunDev up >/dev/null 2>&1
  nohup tun2socks --tundev $TunDev --netif-ipaddr 10.0.0.2 --netif-netmask 255.255.255.0 --socks-server-addr 127.0.0.1:1260 --enable-udprelay --loglevel 1 >/dev/null 2>&1 &
}

#通过包名得到uid
getPackageUid() {
  packageName=${1%%_*}  #过滤包名后面的端口
  if echo $packageName | grep -q '[A-Za-z]'; then
    packageInfo=`grep -oE "^$packageName ([0-9])+" /data/system/packages.list`
    [ $? != 0 ] && return 1
    echo "$1" | grep -qE '_([0-9])+' && \
      echo "${packageInfo#* }_${1#*_}" || \
      echo "${packageInfo#* }"
  else
    echo "$1"
  fi
}

iptablesAndIp() {
  # 防跳
  iptables -t nat -N VNO
  iptables -t nat -A VNO -d $ip -p tcp --dport ${addr#*:} -m owner --uid-owner 0 -j ACCEPT
  [ "$allowWifi" = "1" ] && iptables -t nat -A VNO -o wlan+ -j ACCEPT
  iptables -t nat -A VNO -o tun+ -j ACCEPT
  iptables -t nat -A VNO -o lo -j ACCEPT
  # 防止WiFi共享获取不到ip
  iptables -t nat -A VNO -d 192.168/16 -j ACCEPT
  [ "$allowTcpPorts" != "" ] && iptables -t nat -A VNO -p tcp -m multiport --dports $allowTcpPorts -j ACCEPT
  [ "$allowUdpPorts" != "" -a "$mudp" = "0" ] && iptables -t nat -A VNO -p udp -m multiport --dports $allowUdpPorts -j ACCEPT
  # 本地TCP放行
  for app in $allowAppsTCP; do
    uid=`getPackageUid $app` || continue
    iptables -t nat -A VNO -p tcp -m owner --uid ${uid%_*} `echo $uid|grep -q '_' && echo "-m multiport --dport ${uid#*_}"` -j ACCEPT
  done
  if [ "$mudp" = "0" ]; then
    # 本地UDP放行
    for app in $allowAppsUDP; do
      uid=`getPackageUid $app` || continue
      iptables -t nat -A VNO -p udp -m owner --uid ${uid%_*} `echo $uid|grep -q '_' && echo "-m multiport --dport ${uid#*_}"` -j ACCEPT
    done
  fi
  # 本地全局放行
  for app in $allowApps; do
    uid=`getPackageUid $app` || continue
    iptables -t nat -A VNO -m owner --uid $uid -j ACCEPT
  done

  iptables -t nat -A VNO -p tcp -j REDIRECT --to-ports 1230
  [ "$DNS" = "" ] || iptables -t nat -A VNO -p udp --dport 53 -j REDIRECT --to-ports 1240
  if [ "$mudp" = '0' ]; then
    [ "$fxqt" != '1' ] && iptables -t nat -A VNO ! -p tcp -j REDIRECT --to-ports 1250 || iptables -t nat -A VNO -p udp -j REDIRECT --to-ports 1250
  fi
  [ "$mudp" = '1' -a "$fxqt" != '1' ] && iptables -t nat -A VNO ! -p udp -j REDIRECT --to-ports 1250
  iptables -t nat -I OUTPUT -j VNO

  # 共享规则
  iptables -t nat -N VNP
  [ "$allowShareTcpPorts" != "" ] && iptables -t nat -A VNP -p tcp -m multiport --dports $allowShareTcpPorts -j ACCEPT
  [ "$allowShareUdpPorts" != "" ] && iptables -t nat -A VNP -p udp -m multiport --dports $allowShareUdpPorts -j ACCEPT
  iptables -t nat -A VNP -s 192.168/16 ! -d 192.168/16 -p tcp -j REDIRECT --to-ports 1230
  [ "$DNS" = "" ] || iptables -t nat -A VNP -s 192.168/16 -p udp --dport 53 -j REDIRECT --to-ports 1240
  if [ "$mudp" = '0' ]; then
    [ "$fxqt" != '1' ] && iptables -t nat -A VNP ! -p tcp -j REDIRECT --to-ports 1250 || iptables -t nat -A VNP -p udp -j REDIRECT --to-ports 1250
  fi
  [ "$mudp" = '1' -a "$fxqt" != '1' ] && iptables -t nat -A VNP ! -p udp -j REDIRECT --to-ports 1250
  iptables -t nat -I PREROUTING -j VNP

  # 免udp规则
  if [ "$mudp" == '1' ]; then
    # PREROUTING
    iptables -t mangle -N VMP
    [ "$allowShareUdpPorts" != "" ] && iptables -t mangle -A VMP -p udp -m multiport --dports $allowShareUdpPorts -j ACCEPT
    for allowIp in 127/8 192.168/16 10/8 224/3 0/8 172.16/12 100.64/10 169.254/16
    do
      iptables -t mangle -A VMP -d $allowIp -j ACCEPT
    done

    # OUTPUT
    iptables -t mangle -N VMO
    [ "$allowUdpPorts" != "" ] && iptables -t mangle -A VMO -p udp -m multiport --dports $allowUdpPorts -j ACCEPT
    # 本地UDP放行
    for app in $allowAppsUDP; do
      uid=`getPackageUid $app` || continue
      iptables -t mangle -A VMO -p udp -m owner --uid ${uid%_*} `echo $uid|grep -q '_' && echo "-m multiport --dport ${uid#*_}"` -j ACCEPT
    done
    # 本地全局放行
    for app in $allowApps; do
      uid=`getPackageUid $app` || continue
      iptables -t mangle -A VMO -m owner --uid $uid -j ACCEPT
    done
    [ "$allowWifi" = "1" ] && iptables -t mangle -A VMO -o wlan+ -j ACCEPT
    iptables -t mangle -A VMO -o tun+ -j ACCEPT
    if [ "$useTun" == '1' ]; then
    # tun2socks/TPROXY 选择
      v2tunStart
      sleep 0.1
      ip route replace default dev $TunDev table 1234
      ip rule add from all fwmark 0x1234 lookup 1234
      iptables -t mangle -A VMP ! -i tun+ -p udp ! --dport 53 -j MARK --set-mark 0x1234
      iptables -t mangle -A VMO ! -d 192.168/16 ! -o lo -p udp ! --dport 53 -j MARK --set-mark 0x1234

      iptables -A FORWARD -i $TunDev
      iptables -A FORWARD -o $TunDev
    else
      ip route add local default dev lo table 1234
      ip rule add fwmark 0x1234 lookup 1234
      iptables -t mangle -A VMP ! -i tun+ -p udp ! --dport 53 -j TPROXY --on-port 1230 --tproxy-mark 0x1234
      iptables -t mangle -A VMO ! -d 192.168/16 ! -o lo -p udp ! --dport 53 -j MARK --set-mark 0x1234
    fi
    iptables -t mangle -A OUTPUT -j VMO
    iptables -t mangle -A PREROUTING -j VMP
  fi
}

getIp() {
  server=${addr%:*}
  if echo $server | grep -q [a-zA-Z]; then
    ip=`busybox wget -q -T1 -O- http://119.29.29.29/d?dn=$server | busybox cut -d';' -f1`
    if [ -z "$ip" ]; then
      ip=`ping -c1 -w1 -W1 $server | grep 'PING' | busybox cut -d'(' -f2 |  busybox cut -d')' -f1`
      [ -z "$ip" ] && echo "解析IP失败！($server)" && exit 1
    fi
  else
    ip=$server
  fi
  addr=$ip:${addr#*:}
}

dataControl() {
  if [ "$netstat" != "$1" -a "$kgwl" = "1" ]; then
  wifiip=$(busybox ifconfig wlan0 2>&- | busybox grep 'inet addr')
    if [ "$wifiip" = "" ]; then
      [ "$1" = "y" ] && svc data enable && sleep 0.1
      [ "$1" = "n" ] && svc data disable && sleep 0.01
      netstat="$1"
    fi
  fi
}

makeConfig() {
echo 'dns::Global {
    dns_listen = 0.0.0.0:1240;
    cacheLimit = 512;
    cachePath = /dev/null;
}

dnsAcl {
    destaddr = '$DNS':53;
    lookup_mode = tcpdns;
}' > bin/clnc.conf

echo '{
  "inbounds": [
    {
      "listen": "0.0.0.0",
      "port": 1260,
      "protocol": "socks",
      "settings": {
        "auth": "noauth",
        "udp": true
      },
      "sniffing": {
        "destOverride": [
          "http",
          "tls"
        ],
        "enabled": true
      },
      "tag": "socks"
    },
    {
      "port": 1230,
      "protocol": "dokodemo-door",
      "settings": {
        "network": "tcp,udp",
        "followRedirect": true,
        "timeout": 600
      }
    }
  ],
  "outbounds": [{
    "protocol": "vmess",
    "settings": {
      "vnext": [{
        "address": "'$ip'",
        "port": '${addr#*:}',
        "users": [{
          "id": "'$uuid'",
          "alterId": '$alterId',
          "security": "'$security'"
        }]
      }]
    },' > bin/config.json
if [ "$method" == "ws" -o "$method" == "WS" ]; then
echo '    "streamSettings": {
      "network": "ws",
      "wsSettings": {
        "path": "'$path'",
        "headers": {
          "Host": "'$host'"
        }
      }
    }
  }]
}
' >> bin/config.json
else 
echo '    "streamSettings": {
      "tcpSettings": {
        "header": { 
          "type": "http",
          "request": {
            "version": "1.1",
            "method": "'$method'",
            "path": "'$path'",
            "headers": {
              "Host": "'$host'"
            }
          }
        }
      }
    }
  }]
}
' >> bin/config.json
fi
}

startServer() {
  # 启动程序
  chmod 777 bin/*
  [ "$DNS" = "" ] || clnc -c bin/clnc.conf
  v2ray -config bin/config.json &>/dev/null &
}

clearFile() {
  rm -f confs/*.bak bin/*.bak bin/*.json bin/*.conf
}

statusCheck() {
  ip addr | grep global | grep -E '[1-9]{1,3}[0-9]{0,2}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | \
  while read line
  do
    [ -z "$line" ] && break
    typeset -L17 netcard=${line##* }
    IP=${line%%/*}
    echo "$netcard${IP##* }"
  done
  echo
  [ -n "$IP" ] && echo
  echo -n "✺ 核心程序： "
  busybox pidof "v2ray" >/dev/null && echo -n "✔v2ray  " || echo -n "✘v2ray  "
  if [ "$DNS" != "" ]; then
    busybox pidof "clnc" >/dev/null && echo -n "✔clnc  " || echo -n "✘clnc  "
  fi
  if [ "$useTun" = "1" -a "$mudp" = "1" ]; then
    busybox pidof "tun2socks" >/dev/null && echo -n "✔tun2socks  " || echo -n "✘tun2socks  "
  else
    busybox pidof "tun2socks" >/dev/null && echo -n "✔tun2socks  "
  fi

  echo -e "\n"
  echo ✺ nat表 VNO链：
  iptables -t nat -S VNO 2>&-
  echo ""
  echo ✺ nat表 VNP链：
  iptables -t nat -S | grep -q 'PREROUTING -j VNP' && iptables -t nat -S VNP
  if [ "$mudp" = "1" ]; then
    echo ""
    echo ✺ mangle表 VMP链：
    iptables -t mangle -S | grep -q 'PREROUTING -j VMP' && iptables -t mangle -S VMP
    echo ""
    echo ✺ mangle表 VMO链：
    iptables -t mangle -S VMO 2>&-
  fi
}

main() {
  if [ "$1" = "stop" ]; then
    stopServer 2>&-
  elif [ -z "$1" -o "$1" = "start" ]; then
    stopServer 2>&-
    getIp
    makeConfig
    iptablesAndIp 2>&-
    startServer
    dataControl n
    dataControl y
    sleep 0.2
  fi
  sleep 0.1
  statusCheck
  clearFile
}

main $1